1. 다형성
-다형성이란 하나의 이름 또는 인터페이스를 통해 여러 형태로 구현되거나 나타날 수 있는 성질이다.
*대표적 사례
-오버로딩 : 같은 이름의 메소드가 매개변수의 종류나 수에 따라 다르게 동작하도록 하는 것
-오버 라이딩 : 부모클래스의 메소드가 각각의 자식 클래스마다 다르게 구현되는것
-업캐스팅 : 부모클래스타입의 변수가 모든 자식타입 객체의 주소를 받아볼 수 있는 것
	= 부모 클래스의 멤버만 접근 가능하다.
	= 자식객체에서 오버라이딩된 부모 메소드가 있다면 기존 메소드가 아닌 오버라이딩된 메소드가 호출된다.
-다운캐스팅 : 업캐스팅된 객체를 다시 원래 자식 객체로 돌리기 위해,
부모클래스 타입으로 참조된 변수를 명시적으로 자식클래스 타입으로 형 변환해주는 것이다.
이를 통해 부모 클래스에서 정의된 메소드 이외에도 자식 클래스에서 추가된 메소드 등을 활용할 수 있다.

2. 상속 : 부모클래스에 만들어진 필드, 메소드를 자식클래스가 물려받는 것
-상속의 장점 
1. 공통적인 코드가 있으면 중복으로 작성할 필요가 없음.
2. 클래스들을 계층적인 분류가 가능하다
3. 클래스 재사용과 확장이 용이하며 유지보수가 쉬워짐
-상속의 특징
1. 다중상속을 지원하지 않는다.(단, 인터페이스를 통해 다중상속을 할 수 있다.)
2. 모든 클래스는 Object클래스를 상속받았다.

3. 캡슐화 : 객체의 요소들을 캡슐(클래스)로 싸서 구현하여 내부를 볼 수 없게 하는 것
특징 : 외부의 접근으로부터 객체 보호하여 정보 은닉을 실현한다.
클래스의 등장배경 : 변수 → 배열 → 구조체 → 클래스로 발전하면서, 캡슐화는 private 필드를 만들고
		getter/setter 메소드로 우회해서 접근하는 방식으로 보안적인 문제를 해결하게 되었다.
클래스에서 캡슐화 : private와 같은 접근제어자로 필드를 만들어 직접적인 접근을 막고
	getter/setter 와 같은 메소드로 우회해서 접근하는 것